#!/usr/bin/env bash

# Note: use lowercase names for the Docker images
DOCKER_IMAGE="azureiotpcs/remote-monitoring-webui"

set -e
APP_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && cd .. && pwd )/"
source "$APP_HOME/scripts/.functions.sh"

# The version is stored in a file, to avoid hardcoding it in multiple places
APP_VERSION=$(cat "$APP_HOME/version")

# Whether to update the "latest" tag of the Docker image
BUILD_LATEST="no"

confirm_version() {
    echo "Building version $APP_VERSION"
    read -r -p "Do you want to update the 'latest' version too? [y/N] " response
    response=${response,,} # tolower
    if [[ $response =~ ^(no|n| ) ]] | [ -z $response ]; then
        BUILD_LATEST="no"
    else
        BUILD_LATEST="yes"
    fi
}

build_docker_image() {
    check_dependency_docker

    cd $APP_HOME

    rm -fR out/docker

    mkdir -p            out/docker/src/
    mkdir -p            out/docker/public/

    cp -pR package.json out/docker/
    cp -pR src/*        out/docker/src/
    cp -pR public/*     out/docker/public/

    cp scripts/docker/.dockerignore              out/docker/
    cp scripts/docker/Dockerfile                 out/docker/
    cp scripts/docker/content/run.sh             out/docker/
    cp scripts/docker/content/nginx.conf         out/docker/

    cd out/docker/

    if [[ $BUILD_LATEST == "no" ]]; then
        docker build --squash --compress --label "Tags=azure,iot,suite,solution,pcs,webui,react" --tag "$DOCKER_IMAGE:$APP_VERSION" .
    else
        docker build --squash --compress --label "Tags=azure,iot,suite,solution,pcs,webui,react" --tag "$DOCKER_IMAGE:$APP_VERSION" --tag "$DOCKER_IMAGE:latest" .
    fi
}

confirm_version
build_docker_image

set +e
